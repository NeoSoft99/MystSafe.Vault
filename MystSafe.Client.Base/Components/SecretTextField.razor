@namespace MystSafe.Client.Base.Components

@using MystSafe.Client.Base
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager

<MudToolBar Class="ma-2">
    <div style="display: flex; align-items: center; width: 100%;">
        <div style="flex-grow: 1; margin-right: 8px;">
            @if (ClipboardCopyEnabled)
            {
                <MudTextField @ref="TextReference" @bind-Value="TextValue" T="string" Label="@TextLabel" Mask="@_mask" Lines="@Lines" ReadOnly="@ReadOnly" Variant="@_variant" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@((e) => CopyToClipboard())" @onclick="(() => OnTextClick())" HelperText="@HelperText" />
            }
            else if (InputMaskingEnabled)
            {
                <MudTextField @ref="TextReference" @bind-Value="TextValue" T="string" Label="@TextLabel" Mask="@_mask" Lines="@Lines" ReadOnly="@ReadOnly" Variant="@_variant" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="InverseMasking" HelperText="@HelperText"/>
            }
            else
            {
                <MudTextField @ref="TextReference" @bind-Value="TextValue" T="string" Label="@TextLabel" Mask="@_mask" Lines="@Lines" ReadOnly="@ReadOnly" Variant="@_variant" @onclick="(() => OnTextClick())" HelperText="@HelperText"/>
            }
        </div>

        @if (InputMaskingEnabled && ClipboardCopyEnabled)
        {
            <div>
                <SmartMudIconButton OnButtonClick="@InverseMasking" ButtonSize="Size.Medium" ButtonIcon="@_passwordInputIcon" TooltipText="View/Hide" />
            </div>
        }

        @if (PasswordGeneratorEnabled)
        {
            <div>
                <SmartMudIconButton OnButtonClick="@GenerateRandomPassword" ButtonSize="Size.Medium" ButtonIcon="@Icons.Material.Filled.Refresh" TooltipText="Generate random"/>
            </div>
        }

        @if (PrintEnabled)
        {
            <div>
                <SmartMudIconButton OnButtonClick="@PrintAsync" ButtonSize="Size.Medium" ButtonIcon="@Icons.Material.Filled.Print" TooltipText="Print" />
            </div>
        }
    </div>
</MudToolBar>

@code {
    private string _text_value = string.Empty;

    private MudTextField<string>? TextReference;

    //private async Task KeyUp(KeyboardEventArgs args)
    //{
    //    //try
    //    //{

    //    await OnKeyUp.InvokeAsync(args);
    //    //}
    //    //catch { }
    //}

    //[Parameter]
    //public EventCallback<KeyboardEventArgs> OnKeyUp { get; set; }

    [Parameter]
    public int Lines { get; set; } = 1;

    [Parameter]
    public bool PrintEnabled { get; set; } = false;

    [Parameter]
    public bool PasswordGeneratorEnabled { get; set; } = false;

    [Parameter]
    public bool InputMaskingEnabled { get; set; } = false;

    [Parameter]
    public bool LinkEnabled { get; set; } = false;

    [Parameter]
    public bool ClipboardCopyEnabled { get; set; } = false;

    private bool _readonly = false;

    private Variant _variant = Variant.Text;

    [Parameter]
    public string HelperText { get; set; } = string.Empty;


    private async Task PrintAsync()
    {
        await JSRuntime.InvokeVoidAsync("printTextValue", TextLabel, _text_value);
    }

    private async Task OnTextClick()
    {
        if (LinkEnabled && ReadOnly)
        {
            navigationManager.NavigateTo(TextValue);
        }
        else
        if (ClipboardCopyEnabled)
        {
            await CopyToClipboard();
        }
    }


    [Parameter]
    public bool ReadOnly
    {
        get { return _readonly; }
        set
        {
            if (value != _readonly)
            {
                _readonly = value;

            }
            if (_readonly)
                _variant = Variant.Text;
            else
                _variant = Variant.Outlined;
        }
    }



    [Parameter]
    public EventCallback<bool> ReadOnlyChanged { get; set; }

    [Parameter]
    public string TextLabel { get; set; } = " ";


    private IMask _mask
    {
        get
        {
            switch (TextLabel)
            {
                case "Expiration Date": return new DateMask("MM/YY", 'Y', 'M');
                case "Primary Account Number": return new PatternMask("0000000000000000");
                case "Card Security Code": return new PatternMask("0000");
                default: return null;
            }
        }
    }

    [Parameter]
    public string TextValue
    {
        get { return _text_value; }
        set
        {
            if (value != _text_value)
            {
                _text_value = value;
                var args = new ChangeEventArgs();
                args.Value = _text_value;
                OnValueChanged(args);
            }
        }
    }


    [Parameter]
    public EventCallback<string> TextValueChanged { get; set; }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        try
        {
            TextValue = e.Value.ToString();
            await TextValueChanged.InvokeAsync(TextValue);
        }
        catch { }
    }

    //[Parameter] public InputType MaskingType { get; set; }

    private bool _isShow = false;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.Visibility;

    void InverseMasking()
    {
        if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Text;
        }
    }

    private void GenerateRandomPassword()
    {
        TextValue = RandomPasswordGenerator.GenerateRandomPassword(20, true, true, true, true);
    }

    public async Task CopyToClipboard()
    {
        try
        {
            await TextReference.SelectAsync();

            if (string.IsNullOrEmpty(TextValue))
                return;



            bool isCopied = await JSRuntime.InvokeAsync<bool>("copyTextToClipboard", TextValue.Trim());
            if (isCopied)
            {
                ShowAlert($"{TextLabel} copied to clipboard", Severity.Info);
            }
            else
            {
                throw new Exception("Clipboard API not available.");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Could not copy to clipboard: {ex.Message}", Severity.Error);
        }
    }


    void ShowAlert(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 5;
        Snackbar.Add(message, severity);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!InputMaskingEnabled)
            {
                _isShow = true;
                _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
                _passwordInput = InputType.Text;
            }

            //if (TextLabel == "Notes")
            //    _lines = 2;

            if (ReadOnly)
                _variant = Variant.Text;
            else
                _variant = Variant.Outlined;
        }
        catch (Exception e)
        {
            ShowAlert(string.Format("OnInitializedAsync error: " + e.Message, TextLabel), Severity.Error);
        }

    }

    }