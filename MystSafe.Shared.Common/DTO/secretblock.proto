syntax = "proto3";

option csharp_namespace = "MystSafe.Shared.Common";

package SecretBlock;

service SecretBlockNodeService {
  rpc Broadcast(SecretBlock)returns (SecretBlockBroadcastResult);
  rpc Scan(ScanSecretBlockParams) returns (SecretBlockScanResult);
  rpc GetRuntimeSecretBlock(RuntimeSecretBlockParams) returns (RuntimeSecretBlockResult);
  rpc GetSecretBlock(SecretBlockParams) returns (SecretBlockResult);
}

message SecretBlockBroadcastResult {
  int32 status = 1;
  string message = 2;
}

message ScanSecretBlockParams {
  int64 last_scanned_date_time = 1;
  int32 page_size = 2;
}

message SecretBlockScanResult {
  int32 status = 1;
  string message = 2;
  repeated SecretBlock blocks = 3;
  bool has_more = 4; 
}

message RuntimeSecretBlockParams {
  string group_key = 1;
}

message RuntimeSecretBlockResult {
  int32 status = 1;
  string message = 2;
  repeated SecretBlock blocks = 3;
}

message SecretBlockParams {
  string block_hash = 1;
}

message SecretBlockResult {
  int32 status = 1;
  string message = 2;
  SecretBlock block = 3;
}

message SecretBlock {
  string hash = 1;
  int64 time_stamp = 2;
  int32 height = 3;
  string pub_key = 4;
  string stealth_address = 5;
  string secret_data = 6;
  string secret_group = 7;
  string secret_group_signature = 8;
  string secret_value = 9;
  int32 version = 10;
  int32 network = 11;
  string prev_hash = 12;
  int32 difficulty = 13;
  int32 nonce = 14;
  bool delete_flag = 15;
  int32 expiration = 16; // time interval in seconds from time_stamp - when the block needs to be deleted by nodes and by clients 
  string deletion_hash = 17; // for self-expiring message - hash without message data;  
  string expired_sig = 18; // for self-expiring message - signature of hash without message data
  string signature = 19;
  string license = 20;
  int32 license_type = 21;
  string reserved = 22;
}