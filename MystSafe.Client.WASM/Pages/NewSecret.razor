@page "/newsecret"
@using MystSafe.Client.Engine
@using MystSafe.Shared.Common
@using MystSafe.Client.App.Components
@using MystSafe.Shared.Crypto;
@using MystSafe.Client.Base.Components

@inject SendProcessor sendProcessor
@inject NavigationManager navigationManager
@inject AccountService accountService
@inject SecretsDrawerNotification secretsDrawerNotification
@inject UIModeNotification uiModeNotification

@inject ISnackbar Snackbar


<MudCard Elevation="0" Class="ma-2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@page_title</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Elevation="0" Style="display: flex; flex-direction: column;">
            @if (!edit_mode)
            {
                <MudToolBar Class="ma-2">
                    <div style="display: flex; align-items: center; width: 100%;">
                        <div style="flex-grow: 1; margin-right: 8px;">
                            <MudSelect @bind-Value="@SecretTypeSelected" T="string" Label="Select Secret Type" Variant="Variant.Outlined">
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_LOGIN)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_PAYMENT_CARD)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_WALLET)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_BANK)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_COMPUTER)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_SSL)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_SSH)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_API)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_DATABASE)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_APPLICATION)" />
                                <MudSelectItem Value="@(SecretTypeLabels.SECRET_OTHER)" />
                            </MudSelect>
                        </div>
                    </div>
                </MudToolBar>
            }
            <SecretTextField @bind-TextValue="SecretTitle" TextLabel="Title"> </SecretTextField>

            @switch (SecretTypeSelected)
            {
                case SecretTypeLabels.SECRET_LOGIN:
                    <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Login"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" PasswordGeneratorEnabled="true" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Website Address"> </SecretTextField>
                    break;

                case SecretTypeLabels.SECRET_PAYMENT_CARD:
                    <SecretTextField @bind-TextValue="SecretPAN" TextLabel="Primary Account Number"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretExpDate" TextLabel="Expiration Date"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretCVV" TextLabel="Card Security Code"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretCardholderName" TextLabel="Cardholder Name"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Login"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" PasswordGeneratorEnabled="true" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Website Address"> </SecretTextField>
                    break;

                case SecretTypeLabels.SECRET_WALLET:
                    <SecretTextField @bind-TextValue="SecretAddress" TextLabel="Wallet Address"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretMnemonic" TextLabel="Mnemonic Phrase" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPrivateKey" TextLabel="Private Key (optional)" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Login"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" PasswordGeneratorEnabled="true" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Website Address"> </SecretTextField>
                    break;

                case SecretTypeLabels.SECRET_BANK:
                    <SecretTextField @bind-TextValue="SecretPAN" TextLabel="Bank Account Number"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretRoutingNumber" TextLabel="Routing Number"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Login"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" PasswordGeneratorEnabled="true" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Website Address"> </SecretTextField>
                    break;


                case SecretTypeLabels.SECRET_COMPUTER:
                    <SecretTextField @bind-TextValue="SecretComputerName" TextLabel="Host name or IP address"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Login"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" PasswordGeneratorEnabled="true" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Website Address"> </SecretTextField>
                    break;

                case SecretTypeLabels.SECRET_SSL:
                    <SecretTextField @bind-TextValue="SecretPrivateKey" TextLabel="Private Key" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretDomainName" TextLabel="Domain"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPublicKey" TextLabel="Certificate"> </SecretTextField>
                    break;

                case SecretTypeLabels.SECRET_SSH:
                    <SecretTextField @bind-TextValue="SecretPrivateKey" TextLabel="Private Key" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Endpoint address"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPublicKey" TextLabel="Certificate"> </SecretTextField>
                    break;

                case SecretTypeLabels.SECRET_API:
                    <SecretTextField @bind-TextValue="SecretPrivateKey" TextLabel="API Key" InputMaskingEnabled="true"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Endpoint address"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPublicKey" TextLabel="Public Key"> </SecretTextField>
                    break;

                case SecretTypeLabels.SECRET_DATABASE:
                    <SecretTextField @bind-TextValue="SecretDatabase" TextLabel="Connection String"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Username"> </SecretTextField>
                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" PasswordGeneratorEnabled="true" InputMaskingEnabled="true"> </SecretTextField>

                    break;

               
                case SecretTypeLabels.SECRET_OTHER:
                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Secret" InputMaskingEnabled="true"> </SecretTextField>
                    break;
            }

            <NotesTextField @bind-TextValue="SecretNotes" />

        </MudPaper>
</MudCardContent>
    <MudCardActions>
        @if (edit_mode)
        {
            <MudButton Class="ma-3" OnClick="@(() => CancelEdits())" Variant="Variant.Filled" Color="Color.Inherit">Cancel</MudButton>
            <SmartMudButton NormalText="Save Edits" WorkingText="Saving..." OnButtonClick="AddSecret" IsWorking="is_working"></SmartMudButton>
        }
        else
        {

            <SmartMudButton NormalText="Add Secret" WorkingText="Adding..." OnButtonClick="AddSecret" IsWorking="is_working"></SmartMudButton>

        }
    </MudCardActions>
</MudCard>
<LicenseDialog @bind-IsVisible="license_dialog_visible" Cancel="CancelLicenseDialog"></LicenseDialog>

@code {

    string secret_type_selected = SecretTypeLabels.SECRET_LOGIN;
    string SecretTypeSelected
    {
        get { return secret_type_selected; }
        //set { secret_type_selected = value; }
        set
        {
            if (secret_type_selected != value)
            {
                secret_type_selected = value;

                if (secret_type_selected == SecretTypeLabels.SECRET_APPLICATION)
                {
                    if (string.IsNullOrWhiteSpace(Group_Private_Key))
                    {
                        group_key_pair = KeyPair.GenerateRandom();
                        Group_Private_Key = group_key_pair.PublicKey.ToString();
                    }

                    if (string.IsNullOrWhiteSpace(CLIENT_KEY))
                    {
                        sendProcessor.GenerateClientKey();
                    }
                }
            }
        }
    }

    //string runtime_type_selected = RuntimeTypeLabels.AWS_PANTHER_DETECTION;
    //string RuntimeTypeSelected { get { return runtime_type_selected; } set { runtime_type_selected = value; } }

    // *** license dialog stuff
    private bool license_dialog_visible = false;
    private void ShowLicenseDialog() => license_dialog_visible = true;
    private void CancelLicenseDialog() => license_dialog_visible = false;
    // ***

    void ShowAlert(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 5;

        Snackbar.Add(message, severity);
    }

    private string SecretTitle = "";
    private string SecretLogin = "";
    private string SecretPassword { get; set; } = string.Empty;
    public string SecretNotes = string.Empty;
    private string SecretPAN = "";
    private string SecretExpDate = "";
    private string SecretURL = "";
    private string SecretPrivateKey = "";
    private string SecretPublicKey = "";
    private string SecretAddress = "";
    private string SecretComputerName = "";
    private string SecretDomainName = "";
    private string SecretMnemonic = "";
    private string SecretCardholderName = "";
    private string SecretCVV = "";
    private string SecretDatabase = "";
    private string SecretRoutingNumber = "";

    private string FolderId = "";

    public string CLOUD_ACCOUNT = "";
    public string CLOUD_SECRET_ACCESS_KEY = "";
    public string CLOUD_ASSUMED_ROLE = "";
    public string CLOUD_ACCESS_KEY = "";
    public string CLIENT_KEY = "";
    public string HOST_NAME = "";
    public string USER_NAME = "";
    public string MOTHERBOARD = "";
    public string MAC_ADDRESS = "";
    public string LOCAL_IP_ADDRESS = "";
    public string SERVER_KEY = "";

    private string Group_Private_Key = "";
    private KeyPair group_key_pair = null;

    bool edit_mode = false;
    string page_title = "New Secret";

    bool is_working = false;

    protected void CancelEdits()
    {
        accountService.CurrentAccount.SecretEditMode = false;
        navigationManager.NavigateTo("/secret");
    }

    private void GenerateServerKey()
    {
        SERVER_KEY = sendProcessor.GenerateServerKey();
    }

    private void GenerateClentKey()
    {
        CLIENT_KEY = sendProcessor.GenerateClientKey();
    }


    private async Task AddSecret()
    {
        if (string.IsNullOrWhiteSpace(SecretTitle))
        {
            ShowAlert("Please specify secret title", Severity.Info);
            return;
        }
        is_working = true;
        try
        {
            var secret_block_data = SecretBlockData.New();
            secret_block_data.Title = SecretTitle;
            secret_block_data.Login = SecretLogin;
            secret_block_data.Password = SecretPassword;
            secret_block_data.Notes = SecretNotes;
            secret_block_data.PAN = SecretPAN;
            secret_block_data.ExpDate = SecretExpDate;
            secret_block_data.URL = SecretURL;
            secret_block_data.PrivateKey = SecretPrivateKey;
            secret_block_data.PublicKey = SecretPublicKey;
            secret_block_data.Address = SecretAddress;
            secret_block_data.ComputerName = SecretComputerName;
            secret_block_data.DomainName = SecretDomainName;
            secret_block_data.Mnemonic = SecretMnemonic;
            secret_block_data.CardholderName = SecretCardholderName;
            secret_block_data.CVV = SecretCVV;
            secret_block_data.DatabaseConnectionString = SecretDatabase;
            secret_block_data.RoutingNumber = SecretRoutingNumber;
            secret_block_data.FolderId = FolderId;

            //string[] variables;
            secret_block_data.SecretType = SecretTypeLabels.GetType(SecretTypeSelected);
            /*if (secret_block_data.SecretType == SecretTypes.Application)
            {
                secret_block_data.RuntimeType = RuntimeTypeLabels.GetType(RuntimeTypeSelected);
                if (secret_block_data.RuntimeType == RuntimeTypes.Panther_Detection)
                {


                    secret_block_data.AddRuntimeParam(RuntimeVariables.CLOUD_ACCOUNT, CLOUD_ACCOUNT);
                    secret_block_data.AddRuntimeParam(RuntimeVariables.CLOUD_ACCESS_KEY, CLOUD_ACCESS_KEY);

                    secret_block_data.AddRuntimeParam(RuntimeVariables.CLOUD_ASSUMED_ROLE, CLOUD_ASSUMED_ROLE);
                    secret_block_data.AddRuntimeParam(RuntimeVariables.CLIENT_KEY, CLIENT_KEY);
                }
                else
                if (secret_block_data.RuntimeType == RuntimeTypes.Mac_MacOS)
                {


                    secret_block_data.AddRuntimeParam(RuntimeVariables.HOST_NAME, HOST_NAME);
                    secret_block_data.AddRuntimeParam(RuntimeVariables.MAC_ADDRESS, MAC_ADDRESS);
                    secret_block_data.AddRuntimeParam(RuntimeVariables.MOTHERBOARD, MOTHERBOARD);
                    secret_block_data.AddRuntimeParam(RuntimeVariables.LOCAL_IP_ADDRESS, LOCAL_IP_ADDRESS);
                    secret_block_data.AddRuntimeParam(RuntimeVariables.USER_NAME, USER_NAME);
                    secret_block_data.AddRuntimeParam(RuntimeVariables.CLIENT_KEY, CLIENT_KEY);

                }
            }*/

            SendSecretResult result;
            if (edit_mode)
            {
                secret_block_data.GlobalId = accountService.CurrentAccount.CurrentSecret.Data.GlobalId;
                result = await sendProcessor.UpdateSecret(accountService.CurrentAccount.CurrentSecret, secret_block_data);
            }
            else
            {

                result = await sendProcessor.AddNewSecret(accountService.CurrentAccount, secret_block_data);
            }


            if (result.ResultCode == ResultStatusCodes.SUCCESS)
            {
                accountService.CurrentAccount.SecretEditMode = false;
                accountService.CurrentAccount.CurrentSecretPubKey = result.NewSecret.BlockPubKey;
                navigationManager.NavigateTo("/secret");
                await secretsDrawerNotification.NotifyChanged(false);
            }
            else
            if (result.ResultCode == ResultStatusCodes.LICENSE_VIOLATION)
            {
                ShowLicenseDialog();
            }
            else
            {
                ShowAlert("Could not add secret: " + result.ResultMessage, Severity.Error);
            }
        }
        catch (Exception e)
        {
            ShowAlert("Could not add secret: " + e.Message, Severity.Error);
        }
        finally
        {
            is_working = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {

        if (!await accountService.PageSelector(PageTypes.NEW_SECRET))
            return;

        if (accountService.CurrentAccount.SecretEditMode)
        {
            edit_mode = true;
            page_title = accountService.CurrentAccount.CurrentSecret.Data.Title;

            var SecretType = accountService.CurrentAccount.CurrentSecret.Data.SecretType;
            SecretTypeSelected = SecretTypeLabels.GetLabel(SecretType);
            SecretTitle = accountService.CurrentAccount.CurrentSecret.Data.Title;
            SecretLogin = accountService.CurrentAccount.CurrentSecret.Data.Login;
            SecretPassword = accountService.CurrentAccount.CurrentSecret.Data.Password;
            SecretNotes = accountService.CurrentAccount.CurrentSecret.Data.Notes;
            SecretPAN = accountService.CurrentAccount.CurrentSecret.Data.PAN;
            SecretExpDate = accountService.CurrentAccount.CurrentSecret.Data.ExpDate;
            SecretURL = accountService.CurrentAccount.CurrentSecret.Data.URL;
            SecretPrivateKey = accountService.CurrentAccount.CurrentSecret.Data.PrivateKey;
            SecretPublicKey = accountService.CurrentAccount.CurrentSecret.Data.PublicKey;
            SecretAddress = accountService.CurrentAccount.CurrentSecret.Data.Address;
            SecretComputerName = accountService.CurrentAccount.CurrentSecret.Data.ComputerName;
            SecretDomainName = accountService.CurrentAccount.CurrentSecret.Data.DomainName;
            SecretMnemonic = accountService.CurrentAccount.CurrentSecret.Data.Mnemonic;
            SecretCardholderName = accountService.CurrentAccount.CurrentSecret.Data.CardholderName;
            SecretCVV = accountService.CurrentAccount.CurrentSecret.Data.CVV;
            SecretDatabase = accountService.CurrentAccount.CurrentSecret.Data.DatabaseConnectionString;
            SecretRoutingNumber = accountService.CurrentAccount.CurrentSecret.Data.RoutingNumber;
            FolderId = accountService.CurrentAccount.CurrentSecret.Data.FolderId;

            /*if (SecretType == SecretTypes.Application)
            {

                var RuntimeType = accountService.CurrentAccount.CurrentSecret.Data.RuntimeType;
                RuntimeTypeSelected = RuntimeTypeLabels.GetLabel(RuntimeType);

                CLOUD_ACCOUNT = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_ACCOUNT);
                CLOUD_SECRET_ACCESS_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_SECRET_ACCESS_KEY);
                CLOUD_ACCESS_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_ACCESS_KEY);
                CLOUD_ASSUMED_ROLE = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_ASSUMED_ROLE);
                CLIENT_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLIENT_KEY);
                HOST_NAME = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.HOST_NAME);
                USER_NAME = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.USER_NAME);
                MOTHERBOARD = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.MOTHERBOARD);
                MAC_ADDRESS = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.MAC_ADDRESS);
                LOCAL_IP_ADDRESS = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.LOCAL_IP_ADDRESS);
                SERVER_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.SERVER_KEY);
            }*/
        }
        else
        {
            SecretTypeSelected = SecretTypeLabels.SECRET_LOGIN;
            if (accountService.CurrentAccount.CurrentSecret != null)
            {
                FolderId = accountService.CurrentAccount.CurrentSecret.Data.FolderId;
            }
        }

        await uiModeNotification.NotifyChanged(UIModes.Secrets);

    }
}

