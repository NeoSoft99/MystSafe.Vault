
@page "/secret"

@using MystSafe.Client.Engine
@using MystSafe.Shared.Common
@using MystSafe.Client.App.Components
@using System.Timers
@using MystSafe.Client.Base.Components
@using MystSafe.Shared.Crypto

@inject SendProcessor sendProcessor
@inject NavigationManager navigationManager
@inject AccountService accountService
@implements IDisposable
@inject SecretNotification secretNotification
@inject UIModeNotification uiModeNotification
@inject SecretsDrawerNotification secretDrawerNotification
@inject ISnackbar Snackbar
@inject SecretsDrawerNotification secretsDrawerNotification
@inject IJSRuntime JSRuntime

<MudCard Elevation="0" Class="ma-2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudToolBar Position="Fixed" Top="0">
                <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Lock" Color="Color.Default" />
                <MudText Typo="Typo.body1">@SecretTitle</MudText>
                <MudSpacer />
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    @if (SecretType != SecretTypes.Application)
                    {
                        <MudMenuItem OnClick="ShowInstantShareDialog" OnTouch="ShowInstantShareDialog">
                            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.EmergencyShare" Color="Color.Primary" />
                            Instant Share
                        </MudMenuItem>
                    }
                    <MudMenuItem OnClick="ShowShareDialog" OnTouch="ShowShareDialog">
                        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Share" Color="Color.Primary" />
                        Share via Chat
                    </MudMenuItem>
                    <MudMenuItem OnClick="ShowDeleteDialog" OnTouch="ShowDeleteDialog">
                        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" />
                        Delete
                    </MudMenuItem>
                    <MudMenuItem OnClick="EditSecret" OnTouch="EditSecret">
                        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                        Edit
                    </MudMenuItem>
                    <MudMenuItem OnClick="ShowMoveDialog" OnTouch="ShowMoveDialog">
                        <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.DriveFileMove" Color="Color.Primary" />
                        Move to Folder
                    </MudMenuItem>
                </MudMenu>
            </MudToolBar>
        </CardHeaderContent>
        <CardHeaderActions>
           
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudPaper Elevation="0" Style="display: flex; flex-direction: column;">
            @if (SecretType == SecretTypes.Application)
            {
                @*<SecretTextField @bind-TextValue="RuntimeTypeString" TextLabel="Runtime Type" ReadOnly="true"> </SecretTextField>
                <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Secret Name" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>
                <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                @if (!string.IsNullOrWhiteSpace(CLOUD_ACCOUNT))
                {

                    <SecretTextField @bind-TextValue="CLOUD_ACCOUNT" TextLabel="Cloud Account" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>
                }
                @if (!string.IsNullOrWhiteSpace(CLOUD_ACCESS_KEY))
                {

                    <SecretTextField @bind-TextValue="CLOUD_ACCESS_KEY" TextLabel="Cloud Access Key" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>
                }
                @if (!string.IsNullOrWhiteSpace(CLOUD_SECRET_ACCESS_KEY))
                {

                    <SecretTextField @bind-TextValue="CLOUD_SECRET_ACCESS_KEY" TextLabel="Cloud Secret Access Key" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(CLOUD_ASSUMED_ROLE))
                {

                    <SecretTextField @bind-TextValue="CLOUD_ASSUMED_ROLE" TextLabel="Cloud Assumed Role" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(HOST_NAME))
                {

                    <SecretTextField @bind-TextValue="HOST_NAME" TextLabel="Host name" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(MAC_ADDRESS))
                {

                    <SecretTextField @bind-TextValue="MAC_ADDRESS" TextLabel="MAC Address" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(MOTHERBOARD))
                {

                    <SecretTextField @bind-TextValue="MOTHERBOARD" TextLabel="Motherboard Serial Number" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(LOCAL_IP_ADDRESS))
                {

                    <SecretTextField @bind-TextValue="LOCAL_IP_ADDRESS" TextLabel="Local IP Address" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(USER_NAME))
                {

                    <SecretTextField @bind-TextValue="USER_NAME" TextLabel="User" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(CLIENT_KEY))
                {

                    <SecretTextField @bind-TextValue="CLIENT_KEY" TextLabel="Client Key" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }*@
            }
            else
            {


                @if (!string.IsNullOrWhiteSpace(SecretPAN))
                {

                    <SecretTextField @bind-TextValue="SecretPAN" TextLabel="Primary Account Number" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>
                }
                @if (!string.IsNullOrWhiteSpace(SecretRoutingNumber))
                {

                    <SecretTextField @bind-TextValue="SecretRoutingNumber" TextLabel="Routing Number" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretLogin))
                {

                    <SecretTextField @bind-TextValue="SecretLogin" TextLabel="Login" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }

                @if (!string.IsNullOrWhiteSpace(SecretPassword))
                {

                    <SecretTextField @bind-TextValue="SecretPassword" TextLabel="Password" ReadOnly="true" InputMaskingEnabled="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretURL))
                {

                    <SecretTextField @bind-TextValue="SecretURL" TextLabel="Website Address" ReadOnly="true" ClipboardCopyEnabled="true" LinkEnabled="true"> </SecretTextField>

                }

                @if (!string.IsNullOrWhiteSpace(SecretExpDate))
                {

                    <SecretTextField @bind-TextValue="SecretExpDate" TextLabel="Expiration Date" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretCVV))
                {

                    <SecretTextField @bind-TextValue="SecretCVV" TextLabel="Card Security Code" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretCardholderName))
                {

                    <SecretTextField @bind-TextValue="SecretCardholderName" TextLabel="Cardholder Name" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretAddress))
                {

                    <SecretTextField @bind-TextValue="SecretAddress" TextLabel="Address" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretMnemonic))
                {

                    <SecretTextField @bind-TextValue="SecretMnemonic" TextLabel="Mnemonic Phrase" ReadOnly="true" ClipboardCopyEnabled="true" InputMaskingEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretPrivateKey))
                {

                    <SecretTextField @bind-TextValue="SecretPrivateKey" TextLabel="Private Key" ReadOnly="true" ClipboardCopyEnabled="true" InputMaskingEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretComputerName))
                {

                    <SecretTextField @bind-TextValue="SecretComputerName" TextLabel="Computer" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
                @if (!string.IsNullOrWhiteSpace(SecretDomainName))
                {

                    <SecretTextField @bind-TextValue="SecretDomainName" TextLabel="Domain" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>
                }
                @if (!string.IsNullOrWhiteSpace(SecretPublicKey))
                {

                    <SecretTextField @bind-TextValue="SecretPublicKey" TextLabel="Certificate" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>
                }
                @if (!string.IsNullOrWhiteSpace(SecretDatabase))
                {

                    <SecretTextField @bind-TextValue="SecretDatabase" TextLabel="Connection String" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>

                }
            }

            @if (!string.IsNullOrWhiteSpace(SecretNotes))
            {

                @*<SecretTextField @bind-TextValue="SecretNotes" TextLabel="Notes" ReadOnly="true" ClipboardCopyEnabled="true"> </SecretTextField>*@
                <NotesTextField @bind-TextValue="SecretNotes" ReadOnly="true" ClipboardCopyEnabled="true" />
            }

            @if (instant_share_links.Count > 0)
            {
                <MudList T="MystSafe.Client.Engine.Secret" Clickable="true">
                    <MudText Class="ma-2" Typo="Typo.body1">Instant shares</MudText>
                    @foreach (var secret in instant_share_links)
                    {
                        <MudListItem>
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.EmergencyShare" Color="Color.Default" />
                                <MudStack Row="false" Spacing="0">
                                    <MudText Typo="Typo.body1">@FormatExpirationDateTime(secret.TimeStamp, secret.Expiration)</MudText>
                                    <MudStack Row="true" Spacing="4">
                                        <MudLink Href="@secret.GetInstantShareLink(navigationManager.BaseUri)" Typo="Typo.body2">Open</MudLink>
                                        <MudLink OnClick="@(() => CopyToClipboard(secret.GetInstantShareLink(navigationManager.BaseUri)))" Typo="Typo.body2">Copy</MudLink>
                                        <MudLink OnClick="@(() => SendEmail(secret.GetInstantShareLink(navigationManager.BaseUri)))" Typo="Typo.body2">Email</MudLink>
                                    </MudStack>
                                </MudStack>
                            </MudStack>
                        </MudListItem>
                    }
                </MudList>
            }

            @if (LicenseType == Constants.FREE_LICENSE_TYPE)
            {
                <MudStack Class="ma-2" Row="true" Style="align-items: baseline;">
                    <MudText Typo="Typo.caption" Style="display: inline; margin-right: -12px;">@remainingTimeMessage</MudText>
                    <MudLink Typo="Typo.caption" Href="https://checkout.mystsafe.com" Style="display: inline;">get Premium</MudLink>
                </MudStack>

            }
            <MudToolBar Position="Fixed" Bottom="0">
                <MudText Typo="Typo.caption">Data size (bytes): @DataSize</MudText>
            </MudToolBar>

        </MudPaper>
    </MudCardContent>
</MudCard>


<MudDialog @bind-Visible="show_delete_dialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" />Delete @SecretTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">
            <p>You are about to delete this secret.</p>
            <p>Note that it will delete it from the network</p>
            <p>and your other devices.</p>
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Class="ma-4" OnClick="DeleteSecret" Variant="Variant.Filled" Color="Color.Primary">Delete</MudButton>
        <MudButton Class="ma-4" OnClick="CloseDeleteDialog" Variant="Variant.Filled" Color="Color.Inherit">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="show_share_dialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Share" Class="mr-3" />Share @SecretTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect @bind-Value="@RecipientSelected" T="string" Label="Select Recipient" Variant="Variant.Outlined">
            @foreach (var contact in established_contacts)
            {
                <MudSelectItem Value="@contact.PeerNickName"></MudSelectItem>
            }

        </MudSelect>
        <MudText Typo="Typo.body1">
            <p>You are about to share this secret with another person.</p>
            <p>Note that once you share it, it won't be a secret anymore!</p>
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Class="ma-4" OnClick="ShareSecret" Variant="Variant.Filled" Color="Color.Primary">Share</MudButton>
        <MudButton Class="ma-4" OnClick="CloseShareDialog" Variant="Variant.Filled" Color="Color.Inherit">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="show_move_dialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DriveFileMove" Class="mr-3" />Move @SecretTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect @bind-Value="@SelectedFolderName" T="string" Label="Select Folder" Variant="Variant.Outlined">
            @foreach (var folder in available_folders)
            {
                <MudSelectItem Value="@folder.Data.Title"></MudSelectItem>
            }
        </MudSelect>
        <MudText Typo="Typo.body1">
            <p>You are about to move this secret to another folder.</p>
            <p>Note that once you share it, it won't be a secret anymore!</p>
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Class="ma-4" OnClick="MoveSecret" Variant="Variant.Filled" Color="Color.Primary">Move</MudButton>
        <MudButton Class="ma-4" OnClick="CloseMoveDialog" Variant="Variant.Filled" Color="Color.Inherit">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="show_instant_share_dialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.EmergencyShare" Class="mr-3" />Create instant share link for @SecretTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">
            <p>Anyone with the link will be able to view this secret.</p>
            <p>You can share this link through text or email.</p>
            <p>It will be automatically deleted after the expiration interval.</p>
        </MudText>
        <MudSlider Class="ma-4 slider-flex-grow" Min="1" Max="8" Step="1" @bind-Value="@ExpirationSliderValue" Disabled="create_instant_link_button_disabled">
            Expiration: @GetExpirationInterval()
        </MudSlider>
        <SecretTextField @ref="InstantShareLinkTextFieldComponent" @bind-TextValue="InstantShareLink" TextLabel="Instant share link" ReadOnly="true" ClipboardCopyEnabled="ClipboardCopyEnabled" LinkEnabled="true"> </SecretTextField>
    </DialogContent>
    <DialogActions>
        <SmartMudButton NormalText="Create" WorkingText="Create" OnButtonClick="@(() => InstantShare())" Disabled="create_instant_link_button_disabled" IsWorking="isInstantShareWorking"></SmartMudButton>
        <SmartMudButton NormalText="Email" WorkingText="Email" OnButtonClick="@(() => SendEmail(InstantShareLink))" Disabled="!create_instant_link_button_disabled"></SmartMudButton>

        <MudButton Class="ma-4" OnClick="CloseInstantShareDialog" Variant="Variant.Filled" Color="Color.Inherit">Close</MudButton>
    </DialogActions>
</MudDialog>

<LicenseDialog @bind-IsVisible="license_dialog_visible" Cancel="CancelLicenseDialog"></LicenseDialog>


@code {

    #region license dialog stuff

    private bool license_dialog_visible = false;
    private void ShowLicenseDialog() => license_dialog_visible = true;
    private void CancelLicenseDialog() => license_dialog_visible = false;

    #endregion license dialog stuff

    #region Alerts

    bool show_alert = false;
    string alertMessage = "";

    void ShowAlert(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }


    #endregion Alerts

    #region Delete secret

    bool show_delete_dialog = false;
    private void CloseDeleteDialog() => show_delete_dialog = false;

    void ShowDeleteDialog()
    {
        if (accountService.CurrentAccount == null || accountService.CurrentAccount.CurrentSecret == null)
        {
            navigationManager.NavigateTo("/newsecret");
            return;
        }
        show_delete_dialog = true;
        //StateHasChanged();
    }


    async Task DeleteSecret()
    {
        CloseDeleteDialog();

        try
        {

            var delete_result = await sendProcessor.DeleteSecret(accountService.CurrentAccount.CurrentSecret);

            if (delete_result.ResultCode == ResultStatusCodes.SUCCESS)
            {
                ShowAlert("The secret has been deleted", Severity.Success);

                await secretDrawerNotification.NotifyChanged();
                navigationManager.NavigateTo("/newsecret");
            }
            else
            {
                ShowAlert("Could not delete the secret", Severity.Error);
            }
        }
        catch (Exception e)
        {
            ShowAlert("Could not delete the secret" + e.Message, Severity.Error);
        }

    }


    #endregion Delete secret

    #region Share secret

    bool show_share_dialog = false;
    private void CloseShareDialog() => show_share_dialog = false;

    async Task ShareSecret()
    {
        CloseShareDialog();

        try
        {


            var message_content = accountService.CurrentAccount.CurrentSecret.Data.ToString();


            BaseSendResult result;
            if (accountService.CurrentAccount.CurrentContact.CurrentChatOut == null)
            {
                result = await sendProcessor.SendChatOut(
                    accountService.CurrentAccount.CurrentContact, message_content, MessageTypes.SECRET);
                //result = chatOut != null;

            }
            else
            {

                result = await sendProcessor.SendMessage(
                accountService.CurrentAccount.CurrentContact.CurrentChatOut, message_content, MessageTypes.SECRET);
            }

            if (result.ResultCode == ResultStatusCodes.SUCCESS)
            {
                ShowAlert("The secret has been shared", Severity.Success);
            }
            else
            if (result.ResultCode == ResultStatusCodes.LICENSE_VIOLATION)
            {
                ShowLicenseDialog();
            }
            else
            {
                ShowAlert("Could not share the secret", Severity.Error);
            }

        }
        catch (Exception e)
        {
            ShowAlert("Could not share the secret" + e.Message, Severity.Error);
        }

    }

    List<Contact> established_contacts = new List<Contact>();

    void ShowShareDialog()
    {
        established_contacts.Clear();

        if (accountService.CurrentAccount == null || accountService.CurrentAccount.CurrentSecret == null)
        {
            navigationManager.NavigateTo("/newsecret");
            return;
        }

        if (accountService.CurrentAccount.Contacts.Count == 0)
        {
            navigationManager.NavigateTo("/newchat");
            return;
        }

        foreach (var contact in accountService.CurrentAccount.Contacts)
        {
            if (contact.Status == ContactStatuses.Established)
                established_contacts.Add(contact);

        }

        if (established_contacts.Count == 0)
        {
            ShowAlert("No established contacts found", Severity.Info);
            return;
        }

        show_share_dialog = true;

    }


    #endregion Share

    #region Instant share

    bool show_instant_share_dialog = false;

    string InstantShareLink = string.Empty;
    int _expiration_slider_value;
    int expiration_seconds;
    bool create_instant_link_button_disabled = false;
    private SecretTextField? InstantShareLinkTextFieldComponent;
    bool ClipboardCopyEnabled = false;
    private bool isInstantShareWorking = false;

    string GetExpirationInterval()
    {
        var timeout_value = SliderValueToTimeoutSec(_expiration_slider_value);

        if (timeout_value == 30)
            return "30 sec";
        if (timeout_value == 60 * 60)
            return "1 hour";
        if (timeout_value == 60 * 60 * 3)
            return "3 hours";
        if (timeout_value == 60 * 60 * 24)
            return "24 hours";
        return (timeout_value / 60).ToString() + " min";
    }

    int ExpirationSliderValue
    {
        get { return _expiration_slider_value; }
        set
        {
            if (_expiration_slider_value != value)
            {
                _expiration_slider_value = value;
                OnSliderValueChanged(_expiration_slider_value);
            }
        }
    }

    // returns timeout in seconds
    int SliderValueToTimeoutSec(int slider_value)
    {
        switch (slider_value)
        {
            case 0: return 30; // 30 sec
            case 1: return 60; // 1 min
            case 2: return 3 * 60; // 3 min
            case 3: return 5 * 60; // 5 min
            case 4: return 10 * 60; // 10 min
            case 5: return 30 * 60; // 30 min
            case 6: return 60 * 60; // 1 hour
            case 7: return 60 * 60 * 3; // 3 hours
            case 8: return 60 * 60 * 24; // 24 hours
        }
        return 60;
    }

    int TimeoutToSliderValue(int timeout_sec)
    {
        switch (timeout_sec)
        {
            case 30: return 0;
            case 60: return 1;
            case 3 * 60: return 2;
            case 5 * 60: return 3;
            case 10 * 60: return 4;
            case 30 * 60: return 5;
            case 60 * 60: return 6;
            case 60 * 60 * 3: return 7;
            case 60 * 60 * 24: return 8;
        }
        return 1;
    }

    // Event handler for user-driven changes
    private void OnSliderValueChanged(int newValue)
    {
        expiration_seconds = SliderValueToTimeoutSec(newValue);
        StateHasChanged();
    }

    private string FormatExpirationDateTime(long timeStamp, int expiration)
    {
        DateTime expirationTime = UnixDateTime.ToDateTime(UnixDateTime.AddSeconds(timeStamp, expiration));
        if (expirationTime <= DateTime.Now)
        {
            return "Shared secret is expired";
        }
        else
        {
            string formattedString;
            DateTime today = DateTime.Today;
            if (expirationTime.Date == today)
            {
                // It's today - only show the time in AM/PM format
                formattedString = expirationTime.ToString("h:mm tt");
            }
            else if (expirationTime.Year == today.Year)
            {
                // It's this year but not today - show month and day, and time in AM/PM format
                formattedString = expirationTime.ToString("MMMM d, h:mm tt");
            }
            else
            {
                // It's a different year - show the full date with year, and time in AM/PM format
                formattedString = expirationTime.ToString("MMMM d, yyyy, h:mm tt");
            }

            return "Expiration: " + expirationTime.ToLongTimeString();
        }
    }


    async Task InstantShare()
    {
        isInstantShareWorking = true;
        create_instant_link_button_disabled = true;
        StateHasChanged();
        try
        {
            if (SecretType == SecretTypes.Application)
            {
                ShowAlert("Cannot create an instant share link for Applicastion secret", Severity.Error);
                return;
            }

            var secret_block_data = accountService.CurrentAccount.CurrentSecret.Data.Clone();
            var result = await sendProcessor.AddInstantShareSecret(accountService.CurrentAccount, secret_block_data, expiration_seconds);

            if (result.ResultCode == ResultStatusCodes.SUCCESS)
            {
                InstantShareLink = result.NewSecret.GetInstantShareLink(navigationManager.BaseUri);
                ShowAlert("The secret has been shared through instant share link", Severity.Success);

                ClipboardCopyEnabled = true;
                //await InvokeAsync(() =>
                //{
                //    StateHasChanged();
                //});
                //await InstantShareLinkTextFieldComponent.CopyToClipboard();
                //await InvokeAsync(() =>
                //{
                //Thread.Sleep(100);
                //await CopyToClipboard();
                //});

            }
            else
            if (result.ResultCode == ResultStatusCodes.LICENSE_VIOLATION)
            {
                create_instant_link_button_disabled = false;
                ShowLicenseDialog();
            }
            else
            {
                create_instant_link_button_disabled = false;
                ShowAlert("Could not create an instant share link", Severity.Error);
            }

        }
        catch (Exception e)
        {
            create_instant_link_button_disabled = false;
            ShowAlert("Could not share the secret" + e.Message, Severity.Error);
        }
        finally
        {
            isInstantShareWorking = false;
            StateHasChanged();
        }

    }

    public async Task OpenLink(string link)
    {
        try
        {
            navigationManager.NavigateTo(link);
        }
        catch (Exception ex)
        {
            ShowAlert($"Could not open link: {ex.Message}", Severity.Error);
        }
        finally
        {
            CloseInstantShareDialog();
        }

    }

    public async Task CopyToClipboard(string link)
    {
        try
        {
            //InstantShareLinkTextFieldComponent.SelectAsync();

            bool isCopied = await JSRuntime.InvokeAsync<bool>("copyTextToClipboard", link);
            if (isCopied)
            {
                ShowAlert($"The link is copied to clipboard", Severity.Info);
            }
            else
            {
                throw new Exception("Clipboard API not available.");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Could not copy to clipboard: {ex.Message}", Severity.Error);
        }
    }

    public void SendEmail(string link)
    {
        try
        {
            string email_command = $"mailto:?subject={Uri.EscapeDataString(SecretTitle)}&body={Uri.EscapeDataString(link)}";

            navigationManager.NavigateTo(email_command);

        }
        catch (Exception ex)
        {
            ShowAlert($"Could not send email: {ex.Message}", Severity.Error);
        }
        finally
        {
            CloseInstantShareDialog();
        }

    }

    void ShowInstantShareDialog()
    {

        if (accountService.CurrentAccount == null || accountService.CurrentAccount.CurrentSecret == null)
        {
            navigationManager.NavigateTo("/newsecret");
            return;
        }
        create_instant_link_button_disabled = false;

        ExpirationSliderValue = 3;
        InstantShareLink = string.Empty;
        //InstantShareLinkTextFieldComponent.TextValue = string.Empty;
        ClipboardCopyEnabled = false;

        show_instant_share_dialog = true;
    }

    private void CloseInstantShareDialog()
    {
        show_instant_share_dialog = false;
        UpdateSecret();
    }

    #endregion Instant Share


    #region Move secret

    bool show_move_dialog = false;
    string new_folder_id = string.Empty;
    string SelectedFolderName = string.Empty;

    private void CloseMoveDialog() => show_move_dialog = false;

    async Task MoveSecret()
    {
        CloseMoveDialog();

        try
        {
            new_folder_id = available_folders.Where(folder => folder.Data.Title == SelectedFolderName).First().Data.FolderId;

            var new_secret_data = accountService.CurrentAccount.CurrentSecret.Data.Clone();
            new_secret_data.FolderId = new_folder_id;
            var result = await sendProcessor.UpdateSecret(accountService.CurrentAccount.CurrentSecret, new_secret_data);

            if (result.ResultCode == ResultStatusCodes.SUCCESS)
            {
                await secretsDrawerNotification.NotifyChanged(false);
            }
            else
            if (result.ResultCode == ResultStatusCodes.LICENSE_VIOLATION)
            {
                ShowLicenseDialog();
            }
            else
            {
                ShowAlert("Could not move secret: " + result.ResultMessage, Severity.Error);
            }
        }
        catch (Exception e)
        {
            ShowAlert("Could not move the secret" + e.Message, Severity.Error);
        }

    }

    List<MystSafe.Client.Engine.Secret> available_folders = new List<MystSafe.Client.Engine.Secret>();

    void ShowMoveDialog()
    {
        available_folders.Clear();

        if (accountService.CurrentAccount == null ||
            accountService.CurrentAccount.Secrets.Count == 0 ||
            accountService.CurrentAccount.CurrentSecret == null)
        {
            navigationManager.NavigateTo(PageUrls.NEW_SECRET);
            return;
        }

        available_folders = accountService.CurrentAccount.Secrets.Where(secret => secret.Data.SecretType == SecretTypes.Folder && secret.Data.FolderId != accountService.CurrentAccount.CurrentSecret.Data.FolderId).ToList();

        if (available_folders.Count == 0)
        {
            navigationManager.NavigateTo(PageUrls.NEW_FOLDER);
            return;
        }

        show_move_dialog = true;
    }


    #endregion Share

    private string GlobalId = "";
    private string SecretTitle = "";
    private string SecretLogin = "";
    private string SecretPassword = "";
    private string SecretNotes = "";
    private string SecretPAN = "";
    private string SecretExpDate = "";
    private string SecretURL = "";
    private string SecretPrivateKey = "";
    private string SecretPublicKey = "";
    private string SecretAddress = "";
    private string SecretComputerName = "";
    private string SecretDomainName = "";
    private string SecretMnemonic = "";
    private string SecretCardholderName = "";
    private string SecretCVV = "";
    private string SecretDatabase = "";
    private string SecretRoutingNumber = "";

    // public string CLOUD_ACCOUNT = "";
    // public string CLOUD_SECRET_ACCESS_KEY = "";
    // public string CLOUD_ASSUMED_ROLE = "";
    // public string CLOUD_ACCESS_KEY = "";
    // public string CLIENT_KEY = "";
    // public string HOST_NAME = "";
    // public string USER_NAME = "";
    // public string MOTHERBOARD = "";
    // public string MAC_ADDRESS = "";
    // public string LOCAL_IP_ADDRESS = "";
    // public string SERVER_KEY = "";

    //bool HasLicense = false;
    int LicenseType = 0;
    int DataSize = 0;

    // int RuntimeType = 0;
    // string RuntimeTypeString = string.Empty;

    private DialogOptions dialogOptions = new() { FullWidth = true };

    string RecipientSelected = string.Empty;


    async Task EditSecret()
    {
        accountService.CurrentAccount.SecretEditMode = true;
        navigationManager.NavigateTo("/newsecret");
    }


    int SecretType = SecretTypes.Other;

    List<MystSafe.Client.Engine.Secret> instant_share_links = new List<MystSafe.Client.Engine.Secret>();

    //protected async Task UpdateSecret()
    protected void UpdateSecret()
    {
        try
        {
            if (accountService.CurrentAccount == null)
            {
                navigationManager.NavigateTo("/creataccount");
                return;
            }
            else
            if (accountService.CurrentAccount.CurrentSecret == null)
            {
                navigationManager.NavigateTo("/newsecret");
                return;
            }
            else
            {
                GlobalId = accountService.CurrentAccount.CurrentSecret.Data.GlobalId;
                SecretType = accountService.CurrentAccount.CurrentSecret.Data.SecretType;
                SecretTitle = accountService.CurrentAccount.CurrentSecret.Data.Title;
                SecretLogin = accountService.CurrentAccount.CurrentSecret.Data.Login;
                SecretPassword = accountService.CurrentAccount.CurrentSecret.Data.Password;
                SecretNotes = accountService.CurrentAccount.CurrentSecret.Data.Notes;
                SecretPAN = accountService.CurrentAccount.CurrentSecret.Data.PAN;
                SecretExpDate = accountService.CurrentAccount.CurrentSecret.Data.ExpDate;
                SecretURL = accountService.CurrentAccount.CurrentSecret.Data.URL;
                SecretPrivateKey = accountService.CurrentAccount.CurrentSecret.Data.PrivateKey;
                SecretPublicKey = accountService.CurrentAccount.CurrentSecret.Data.PublicKey;
                SecretAddress = accountService.CurrentAccount.CurrentSecret.Data.Address;
                SecretComputerName = accountService.CurrentAccount.CurrentSecret.Data.ComputerName;
                SecretDomainName = accountService.CurrentAccount.CurrentSecret.Data.DomainName;
                SecretMnemonic = accountService.CurrentAccount.CurrentSecret.Data.Mnemonic;
                SecretCardholderName = accountService.CurrentAccount.CurrentSecret.Data.CardholderName;
                SecretCVV = accountService.CurrentAccount.CurrentSecret.Data.CVV;
                SecretDatabase = accountService.CurrentAccount.CurrentSecret.Data.DatabaseConnectionString;
                SecretRoutingNumber = accountService.CurrentAccount.CurrentSecret.Data.RoutingNumber;

                //RuntimeType = accountService.CurrentAccount.CurrentSecret.Data.RuntimeType;
                //RuntimeTypeString = RuntimeTypeLabels.GetLabel(RuntimeType);

                // CLOUD_ACCOUNT = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_ACCOUNT);
                // CLOUD_SECRET_ACCESS_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_SECRET_ACCESS_KEY);
                // CLOUD_ACCESS_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_ACCESS_KEY);
                // CLOUD_ASSUMED_ROLE = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLOUD_ASSUMED_ROLE);
                // CLIENT_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.CLIENT_KEY);
                // HOST_NAME = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.HOST_NAME);
                // USER_NAME = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.USER_NAME);
                // MOTHERBOARD = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.MOTHERBOARD);
                // MAC_ADDRESS = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.MAC_ADDRESS);
                // LOCAL_IP_ADDRESS = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.LOCAL_IP_ADDRESS);
                // SERVER_KEY = accountService.CurrentAccount.CurrentSecret.Data.GetRuntimeParam(RuntimeVariables.SERVER_KEY);

                LicenseType = accountService.CurrentAccount.CurrentSecret.LicenseType;

                DataSize = accountService.CurrentAccount.CurrentSecret.DataSize;

                instant_share_links.Clear();

                foreach (var secret in accountService.CurrentAccount.Secrets)
                {
                    if (!string.IsNullOrEmpty(secret.Data.InstantKey) &&
                                 secret.Data.GlobalId == GlobalId)
                    {
                        instant_share_links.Add(secret);
                    }
                }

                StateHasChanged();

            }
        }
        catch (Exception e)
        {
            ShowAlert(e.Message, Severity.Warning);
        }

    }

    string remainingTimeMessage = string.Empty;
    private Timer? countdownTimer;
    UnixTimeInterval? retentionInterval;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            //if (!await accessControlService.IsLoggedIn(accountService.CurrentAccount))
            //{
            //    navigationManager.NavigateTo("/locked");
            //    return;
            //}

            if (!await accountService.PageSelector(PageTypes.SECRET))
                return;

            secretNotification.OnChanged += SecretChanged;

            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Configuration.MaxDisplayedSnackbars = 5;

            ExpirationSliderValue = 3;

            UpdateSecret();

            retentionInterval = UnixTimeInterval.FromRetentionInterval(accountService.CurrentAccount.Network, typeof(SecretBlock));
            var timer_interval = accountService.CurrentAccount.Network == Networks.devnet ? 1000 : 60 * 1000;
            countdownTimer = new Timer(timer_interval); // Set the interval to 1 second for devnet and 1 min for mainnet and testnet
            countdownTimer.Elapsed += UpdateCountdown;
            countdownTimer.AutoReset = true;
            UpdateCountdown(null, null);
            countdownTimer.Start();


            await uiModeNotification.NotifyChanged(UIModes.Secrets);
        }
        catch (Exception e)
        {
            ShowAlert(e.Message, Severity.Warning);
        }

    }

    private void UpdateCountdown(Object source, ElapsedEventArgs e)
    {
        var remainingTime = new UnixTimeInterval(accountService.CurrentAccount.CurrentSecret.TimeStamp + retentionInterval.Value - UnixDateTime.Now);

        if (remainingTime.Value < 0)
        {
            countdownTimer?.Stop();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
        else
        {
            remainingTimeMessage = "This record will expire in " + remainingTime.ToDisplayString() + ". To keep it, make edits or ";

            // This is necessary to refresh the UI
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void SecretChanged(object? sender, EventArgs e)
    {
        UpdateSecret();
    }


    void IDisposable.Dispose()
    {
        try
        {
            if (secretNotification != null)
            {
                secretNotification.OnChanged -= SecretChanged;
            }
            countdownTimer?.Dispose();
        }
        catch
        {

        }
    }


}


