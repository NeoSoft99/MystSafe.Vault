@using MystSafe.Client.Engine
@using MystSafe.Client.Base
@using MystSafe.Client.Base.Components

@implements IDisposable
@inject NavigationManager navigationManager
@inject AccountService accountService
@inject SendProcessor sendProcessor
@inject UpdateProcessor updateProcessor
@inject SecretsDrawerNotification secretsDrawerNotification
@inject SecretNotification secretNotification
@inject MainLayoutNotification mainLayoutNotification
@inject ISnackbar Snackbar
@inject SecretExportService secretExportService
@inject BrowserInfoService browserInfo
@inject AccessControlService accessControlService

<div class="secrets-drawer" />

<MudToolBar Position="Fixed" Top="0">

    <SmartMudIconButton OnButtonClick="@((e) => NewSecret())" ButtonIcon="@Icons.Material.Filled.Add" ButtonSize="Size.Medium" TooltipText="New Secret" />

    <SmartMudIconButton OnButtonClick="@((e) => NewFolder())" ButtonIcon="@Icons.Material.Filled.FolderOpen" ButtonSize="Size.Medium" TooltipText="New Folder" />

    <MudSpacer />
    <MudMenu Class="ma-2" Icon="@Icons.Material.Filled.MoreVert">
        <MudMenuItem OnClick="SyncFromScratch" OnTouch="SyncFromScratch">
            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Sync" Color="Color.Primary" />
            Full Sync
        </MudMenuItem>
        <MudMenuItem OnClick="ExportSecrets" OnTouch="ExportSecrets" Disabled="@export_disabled">
            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Download" Color="Color.Primary" />
            Export
        </MudMenuItem>
        @*<MudMenuItem>
                <MudFileUpload T="IBrowserFile" FilesChanged="ViewSecretExportFile">
                    <ButtonTemplate>
                        <MudIconButton Style="margin-top: -6px;" HtmlTag="label" Icon="@Icons.Material.Filled.FileOpen" Size="Size.Medium" Color="Color.Primary" for="@context.Id" />
                    </ButtonTemplate>
                </MudFileUpload>
                Decrypt
            </MudMenuItem>*@
    </MudMenu>
</MudToolBar>
@if (accountService.CurrentAccount != null && accountService.CurrentAccount.Secrets.Count > 0)
{
    <MudToolBar Position="Fixed" Top="0">
        <MudTextField Class="ma-2 mr-2" @bind-Value="SearchValue" T="string" Label="Search" Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Immediate="true" Margin="Margin.Dense"/>
    </MudToolBar>
}

<MudTreeView T="string" Hover="true" @bind-SelectedValue="SelectedValue">

    @foreach (var folder in secrets)
    {
        if (folder.Data.SecretType == SecretTypes.Folder && folder.FolderSecretsCount(secrets) == 0)
        {
            <MudTreeViewItem Value="@folder.Data.Title" @onclick="(() => GoToSecret(folder))" @bind-Expanded="@folder.FolderExpanded" Icon="@(folder.FolderExpanded ? Icons.Material.Filled.FolderOpen : Icons.Material.Filled.Folder)" />
        }
        else
        if (folder.Data.SecretType == SecretTypes.Folder && folder.FolderSecretsCount(secrets) > 0)
        {
            <MudTreeViewItem Value="@folder.Data.Title" @onclick="(() => GoToSecret(folder))" @bind-Expanded="@folder.FolderExpanded" Icon="@(folder.FolderExpanded ? Icons.Material.Filled.FolderOpen : Icons.Material.Filled.Folder)">
                @foreach (var inner_secret in secrets)
                {
                    if (inner_secret.Data.SecretType != SecretTypes.Folder &&
                inner_secret.Data.FolderId == folder.Data.FolderId &&
                string.IsNullOrEmpty(inner_secret.Data.InstantKey))
                    {
                        <MudTreeViewItem Value="@inner_secret.Data.Title" @onclick="(() => GoToSecret(inner_secret))" Icon="@Icons.Material.Filled.Lock">
                        </MudTreeViewItem>
                    }
                }
            </MudTreeViewItem>
        }
        else
        if (folder.Data.SecretType != SecretTypes.Folder &&
            string.IsNullOrEmpty(folder.Data.FolderId) &&
            string.IsNullOrEmpty(folder.Data.InstantKey))
        {
            <MudTreeViewItem Value="@folder.Data.Title" @onclick="(() => GoToSecret(folder))" Icon="@Icons.Material.Filled.Lock">
            </MudTreeViewItem>
        }
    }

</MudTreeView>


@*
    <MudList Clickable="true">
        @foreach (var secret in secrets)
        {
            <MudListItem @onclick="(() => GoToSecret(secret))">

                <MudStack Row="true">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Default" />
                    <MudStack Row="false" Spacing="0">
                        <MudText Typo="Typo.body1">@secret.Data.Title</MudText>
                    </MudStack>
                </MudStack>
            </MudListItem>
        }
    </MudList>
*@

@code {

    private Timer refreshTimer;
    string selected_secret_pub_key = string.Empty;
    bool export_disabled = true;

    List<Secret> secrets = new List<Secret>();

    bool is_sync_working = false;

    string SelectedValue { get; set; }

    private string _search_value = string.Empty;

    public string SearchValue
    {
        get { return _search_value; }
        set
        {
            if (value != _search_value)
            {
                _search_value = value;
                var args = new ChangeEventArgs();
                args.Value = _search_value;
                OnSearchValueChanged(args);
            }
        }
    }

    private async Task OnSearchValueChanged(ChangeEventArgs e)
    {
        try
        {
            SearchSecrets(e.Value.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private bool FolderContainsMatchingSecrets(Secret folder, string searchText, List<Secret> allSecrets)
    {
        // Ensure we're working with a folder
        if (folder.Data.SecretType != SecretTypes.Folder)
            return false;

        // Check if any secrets in the same folder match the search criteria
        var result = allSecrets.Any(secret =>
            secret.Data.FolderId == folder.Data.FolderId &&
            secret.Data.SecretType != SecretTypes.Folder &&
            (secret.Data.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.Notes.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.Login.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.Password.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.Mnemonic.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.PrivateKey.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.PublicKey.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.URL.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.Address.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.PAN.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.ExpDate.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.CardholderName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.ComputerName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.DomainName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.CVV.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.DatabaseConnectionString.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.RoutingNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             secret.Data.GroupPrivateKey.Contains(searchText, StringComparison.OrdinalIgnoreCase)));
        if (result)
        {
            folder.FolderExpanded = true;
        }
        return result;
    }




    public void SearchSecrets(string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            secrets = new List<Secret>(accountService.CurrentAccount.Secrets);
        }
        else
        {
            var allSecrets = accountService.CurrentAccount.Secrets;
            secrets = allSecrets.Where(s =>
                (s.Data.SecretType == SecretTypes.Folder && (s.Data.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase) || FolderContainsMatchingSecrets(s, searchText, allSecrets)))
                ||
                (s.Data.SecretType != SecretTypes.Folder && (
                    s.Data.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.Notes.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.Login.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.Password.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.Mnemonic.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.PrivateKey.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.PublicKey.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.URL.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.Address.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.PAN.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.ExpDate.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.CardholderName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.ComputerName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.DomainName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.CVV.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.DatabaseConnectionString.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.RoutingNumber.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    s.Data.GroupPrivateKey.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
            ).ToList();
        }
        StateHasChanged();
    }



    async Task SyncFromScratch()
    {
        if (is_sync_working)
        {
            ShowAlert("Sync already in progress. Try again later.", Severity.Warning);
            return;
        }

        is_sync_working = true;
        ShowAlert("Started full sync with the network", Severity.Info);
        try
        {
            accountService.CurrentAccount.LastScannedSecretBlock = 0;
            await sendProcessor.LookForSecrets(accountService.CurrentAccount);
            secrets.Clear();
            await Refresh();
            ShowAlert("Network sync has been completed", Severity.Success);
        }
        catch (Exception e)
        {
            ShowAlert("Network sync failed: " + e.Message, Severity.Error);

        }
        finally
        {
            is_sync_working = false;
        }
    }

    async Task IncrementalSync()
    {
        if (is_sync_working || !accountService.HasActiveAccount || accessControlService.IsAppLocked)
            return;

        is_sync_working = true;
        try
        {
            await sendProcessor.LookForSecrets(accountService.CurrentAccount);
            await Refresh();
        }
        catch (Exception e)
        {
            Console.WriteLine("Network sync failed: " + e.ToString());
        }
        finally
        {
            is_sync_working = false;
        }
    }

    async Task ExportSecrets()
    {
        try
        {
            var secrets = accountService.CurrentAccount.Secrets;
            var filename = await secretExportService.ExportSecretsToFileAsync(secrets, "mystsafe_export", accountService.CurrentAccount.Mnemonic);

            ShowAlert("Secrets have been saved in file " + filename, Severity.Success);
        }
        catch (Exception e)
        {
            ShowAlert("Secret data export failed: " + e.Message, Severity.Error);
        }
    }


    void IDisposable.Dispose()
    {

        try
        {
            refreshTimer?.Dispose();
            secretsDrawerNotification.OnChanged -= DrawerChanged;
        }
        catch { }

    }

    private void DrawerChanged(object sender, EventArgs e)
    {
        bool TestingInProgress = false;
        var testingEventArgs = e as TestingEventArgs;
        if (testingEventArgs != null)
        {
            TestingInProgress = testingEventArgs.TestingInProgress;
        }
        Refresh(TestingInProgress);
    }

    private async Task GoToSecret(Secret secret)
    {
        try
        {
            accountService.CurrentAccount.SecretEditMode = false;
            accountService.CurrentAccount.CurrentSecretPubKey = secret.BlockPubKey;
            selected_secret_pub_key = secret.BlockPubKey;

            await mainLayoutNotification.NotifyChanged(false);
            if (secret.Data.SecretType != SecretTypes.Folder)
                navigationManager.NavigateTo("/secret");
            else
                navigationManager.NavigateTo("/folder");
            await secretNotification.NotifyChanged(false);
        }
        catch (Exception e)
        {
            ShowAlert("GoToSecret failed: " + e.Message, Severity.Error);

        }

    }

    bool refresh_in_progress = false;



    protected async Task<int> Refresh(bool TestingInProgress = false)
    {
        if (refresh_in_progress || accessControlService.IsAppLocked)
            return -1;

        refresh_in_progress = true;
        try
        {
            if (!accountService.HasActiveAccount || accountService.CurrentAccount.Secrets.Count == 0)
            {
                secrets.Clear();
                export_disabled = true;
                StateHasChanged();
                return -1;
            }

            if (accountService.CurrentAccount.SecretUpdateFlag)
            {
                secrets.Clear();
                accountService.CurrentAccount.SecretUpdateFlag = false;
            }

            // remove deleted secrets 
            var currentSecrets = accountService.CurrentAccount.Secrets;
            var existingPubKeys = new HashSet<string>(currentSecrets.Select(s => s.BlockPubKey));
            secrets.RemoveAll(s => !existingPubKeys.Contains(s.BlockPubKey));

            // check if there are new secrets added
            foreach (var secret in accountService.CurrentAccount.Secrets)
            {
                if (!SecretExists(secret))
                {
                    secrets.Add(secret);

                }
            }

            export_disabled = secrets.Count == 0;
            StateHasChanged();
        }
        catch (Exception e)
        {
            ShowAlert("Refresh failed: " + e.Message, Severity.Error);
        }
        finally
        {
            refresh_in_progress = false;
        }
        return secrets.Count;
    }


    private bool SecretExists(Secret secret)
    {
        foreach (var s in secrets)
            if (s.BlockPubKey == secret.BlockPubKey)
                return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!await accountService.PageSelector(PageTypes.DRAWER))
                return;

            secretsDrawerNotification.OnChanged += DrawerChanged;
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Configuration.MaxDisplayedSnackbars = 5;
            var secret_count = await Refresh();
            refreshTimer = new Timer(_ => InvokeAsync(async () => await IncrementalSync()), null, TimeSpan.Zero, TimeSpan.FromSeconds(ClientConstants.SECRETS_REFRESH_INTERVAL_SECONDS));

        }

        catch (Exception e)
        {
            ShowAlert("OnInitializedAsync failed: " + e.Message, Severity.Error);

        }
    }

    private async Task NewSecret()
    {
        if (AccountExists())
        {
            await mainLayoutNotification.NotifyChanged(false);
            navigationManager.NavigateTo(PageUrls.NEW_SECRET);
        }
    }

    private async Task NewFolder()
    {
        if (AccountExists())
        {
            await mainLayoutNotification.NotifyChanged(false);
            navigationManager.NavigateTo(PageUrls.NEW_FOLDER);
        }
    }

    private bool AccountExists()
    {
        if (!accountService.HasActiveAccount)
        {
            navigationManager.NavigateTo(PageUrls.CREATE_ACCOUNT);
            return false;
        }
        else
            return true;
    }


    void ShowAlert(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }


    }
